load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin")
load("@npm//@babel/cli:index.bzl", "babel")
load("@npm//@bazel/terser:index.bzl", "terser_minified")
load("@npm//@bazel/esbuild:index.bzl", "esbuild", "esbuild_config")
load("@npm//@bazel/typescript:index.bzl", "ts_project")
load("@npm//http-server:index.bzl", "http_server")
load("@npm//sass:index.bzl", "sass")

sass(
    name = "styles",
    outs = ["styles.module.css"],
    args = [
        "$(execpath styles.module.scss)",
        "$(execpath styles.module.css)",
    ],
    data = ["styles.module.scss"],
)

ts_project(
    name = "lib",
    supports_workers = True,
    deps = [
        "@npm//@types",
        "@npm//antd",
        "@npm//csstype",
    ],
)

copy_to_bin(
    name = "esbuild_plugin_import",
    srcs = [
        "esbuild-plugin-import.mjs",
    ]
)

esbuild_config(
    name = "esbuild_config",
    config_file = "esbuild.config.mjs",
    deps = [
        ":esbuild_plugin_import",
        "@npm//esbuild-plugin-css-modules",
    ],
)

esbuild(
    name = "bundle-es2015",
    entry_point = "index.tsx",
    minify = False,
    config = ":esbuild_config",
    output_dir = True,
    splitting = True,
    srcs = [
        "index.js",
        "styles.module.css",
    ],
    deps = [
        ":lib",
        "@npm//:node_modules",
    ],
)

babel(
    name = "bundle-es5",
    args = [
        "$(locations :bundle-es2015)",
        "--no-babelrc",
        "--source-maps",
        "--out-dir",
        "$(@D)",
    ],
    data = [
        ":bundle-es2015",
    ],
    output_dir = True,
)

terser_minified(
    name = "bundle-es2015.min",
    src = ":bundle-es2015",
)

terser_minified(
    name = "bundle-es5.min",
    src = ":bundle-es5",
)

http_server(
    name = "server",
    data = [
        "index.html",
        ":bundle-es2015",
        ":bundle-es5.min",
        ":bundle-es2015.min",
    ],
    templated_args = ["."],
)
